generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Usuario {
  id         Int         @id @default(autoincrement())
  nombre     String
  correo     String      @unique
  tipo       TipoUsuario @default(CLIENTE)
  telefono   String
  contrasena String
  cliente    Cliente?
  trabajador Trabajador?
}

model Cliente {
  id             Int            @id
  direccion      String
  calificacion   String
  calificaciones Calificacion[]
  usuario        Usuario        @relation(fields: [id], references: [id])
  trabajos       Trabajo[]      @relation("ClienteTrabajo")
}

model Trabajador {
  id                   Int            @id
  calificacionPromedio Float
  biografia            String
  disponibilidad       Boolean
  ubicacionId          Int
  calificaciones       Calificacion[]
  usuario              Usuario        @relation(fields: [id], references: [id])
  ubicacion            Ubicacion      @relation(fields: [ubicacionId], references: [id])
  trabajos             Trabajo[]      @relation("TrabajadorTrabajo")
  servicios            Servicio[]     @relation("TrabajadorServicios")
}

model Servicio {
  id           String       @id @default(uuid())
  nombre       String
  descripcion  String
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  trabajos     Trabajo[]
  trabajadores Trabajador[] @relation("TrabajadorServicios")
}

model Trabajo {
  id              String         @id @default(uuid())
  descripcion     String
  estado          EstadoTrabajo
  fechaSolicitud  DateTime
  fechaProgramada DateTime
  direccion       String
  costoEstimado   Float
  clienteId       Int
  trabajadorId    Int
  servicioId      String
  calificaciones  Calificacion[]
  cliente         Cliente        @relation("ClienteTrabajo", fields: [clienteId], references: [id])
  servicio        Servicio       @relation(fields: [servicioId], references: [id])
  trabajador      Trabajador     @relation("TrabajadorTrabajo", fields: [trabajadorId], references: [id])
}

model Calificacion {
  id           String     @id @default(uuid())
  trabajoId    String
  clienteId    Int
  trabajadorId Int
  puntuacion   Int
  comentario   String
  fecha        DateTime
  cliente      Cliente    @relation(fields: [clienteId], references: [id])
  trabajador   Trabajador @relation(fields: [trabajadorId], references: [id])
  trabajo      Trabajo    @relation(fields: [trabajoId], references: [id])
}

model Ubicacion {
  id           Int          @id @default(autoincrement())
  latitud      Float
  longitud     Float
  numeroCasa   String
  referencia   String
  calle1       String
  calle2       String
  provincia    String
  ciudad       String
  trabajadores Trabajador[]
}

enum TipoUsuario {
  CLIENTE
  TRABAJADOR
}

enum EstadoTrabajo {
  PENDIENTE
  EN_PROGRESO
  COMPLETADO
  CANCELADO
}
