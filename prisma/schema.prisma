// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum TipoUsuario {
  CLIENTE
  TRABAJADOR
}

enum EstadoTrabajo {
  PENDIENTE
  EN_PROGRESO
  COMPLETADO
  CANCELADO
}

model Usuario {
  id          Int         @id @default(autoincrement())
  nombre      String
  correo      String      @unique
  contrasena  String
  tipo        TipoUsuario @default(CLIENTE)
  telefono    String

  cliente     Cliente?
  trabajador  Trabajador?
}

model Cliente {
  id              Int            @id
  direccion       String
  calificacion    String
  usuario         Usuario        @relation(fields: [id], references: [id])

  trabajos        Trabajo[]      @relation("ClienteTrabajo")
  calificaciones  Calificacion[]
}

model Trabajador {
  id                   Int            @id
  calificacionPromedio Float
  biografia            String
  disponibilidad       Boolean
  ubicacionId          Int
  usuario              Usuario        @relation(fields: [id], references: [id])
  ubicacion            Ubicacion      @relation(fields: [ubicacionId], references: [id])

  servicios            Servicio[]     @relation("TrabajadorServicios")
  trabajos             Trabajo[]      @relation("TrabajadorTrabajo")
  calificaciones       Calificacion[]
}

model Servicio {
  id            String        @id @default(uuid())
  nombre        String
  descripcion   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  trabajos      Trabajo[]
  trabajadores  Trabajador[]  @relation("TrabajadorServicios")
}

model Trabajo {
  id               String         @id @default(uuid())
  descripcion      String
  estado           EstadoTrabajo
  fechaSolicitud   DateTime
  fechaProgramada  DateTime
  direccion        String
  costoEstimado    Float

  clienteId        Int
  trabajadorId     Int
  servicioId       String

  cliente          Cliente        @relation("ClienteTrabajo", fields: [clienteId], references: [id])
  trabajador       Trabajador     @relation("TrabajadorTrabajo", fields: [trabajadorId], references: [id])
  servicio         Servicio       @relation(fields: [servicioId], references: [id])

  calificaciones   Calificacion[]
}

model Calificacion {
  id           String     @id @default(uuid())
  trabajoId    String
  clienteId    Int
  trabajadorId Int
  puntuacion   Int
  comentario   String
  fecha        DateTime

  trabajo      Trabajo    @relation(fields: [trabajoId], references: [id])
  cliente      Cliente    @relation(fields: [clienteId], references: [id])
  trabajador   Trabajador @relation(fields: [trabajadorId], references: [id])
}

model Ubicacion {
  id           Int          @id @default(autoincrement())
  latitud      Float
  longitud     Float
  numeroCasa   String
  referencia   String
  calle1       String
  calle2       String
  provincia    String
  ciudad       String

  trabajadores Trabajador[]
}